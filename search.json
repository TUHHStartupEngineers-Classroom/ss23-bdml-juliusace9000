[
  {
    "objectID": "content/01_journal/01_Challenge.html",
    "href": "content/01_journal/01_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/01_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT~\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, ~\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53~\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68~\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01~\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09~\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5~\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1~\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\n# Select the symbol, date, and adjusted columns\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>%\n  select(\"symbol\", \"date\", \"adjusted\")\n\n# Filter dates beginning in the year 2018 and beyond\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  filter(date >= as.Date(\"2018-01-01\"))\n\n# Compute lag of 1 day on the adjusted stock price, grouped by symbol\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  group_by(symbol) %>%\n  mutate(lag_adjusted = lag(adjusted)) %>%\n  ungroup()\n\n# Remove NA values from the lag operation\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  na.omit()\n\n# Compute the difference between adjusted and the lag\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  mutate(difference = adjusted - lag_adjusted)\n\n# Compute the percentage difference by dividing the difference by the lag\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  mutate(pct_return = difference / lag_adjusted)\n\n# Select only the symbol, date, and pct_return columns\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  select(\"symbol\", \"date\", \"pct_return\")\n\n# Save as a variable named sp_500_daily_returns_tbl\nsp_500_daily_returns_tbl <- as_tibble(sp_500_daily_returns_tbl)\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\n# Spread the date column to get the values as percentage returns\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)\n\n# Save the result as stock_date_matrix_tbl\nstock_date_matrix_tbl <- as_tibble(stock_date_matrix_tbl)\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\ntot_withinss <- glance(kmeans_obj)$tot.withinss\ntot_withinss\n\n#> [1] 29.20555"
  },
  {
    "objectID": "content/01_journal/01_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\n# Create a tibble with column 'centers' from 1 to 30\ncenters_tbl <- tibble(centers = 1:30)\n\n# Add 'k_means' column with kmeans_mapper() output\nk_means_mapped_tbl <- centers_tbl %>%\n  mutate(k_means = map(centers, kmeans_mapper))\n\n# Add 'glance' column with glance() output\nk_means_mapped_tbl <- k_means_mapped_tbl %>%\n  mutate(glance = map(k_means, glance))\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Unnest the glance column\nunnested_tbl <- k_means_mapped_tbl %>%\n  unnest(glance)\n\n# Plot the centers vs. tot.withinss\nscree_plot <- ggplot(unnested_tbl, aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_light()\n\n# Display the scree plot\nprint(scree_plot)\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/01_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# De-select the 'symbol' column\numap_results <- select(stock_date_matrix_tbl, -symbol) %>%\n  umap()\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- as_tibble(umap_results$layout) %>%\n  bind_cols(stock_date_matrix_tbl %>% select(symbol))\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n# Create a scatter plot of UMAP results\numap_plot <- ggplot(umap_results_tbl, aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"UMAP Projection\") +\n  theme_tq()\n\n# Display the UMAP plot\nprint(umap_plot)\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl %>%\n  filter(centers == 10)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n# Augment k_means_obj with stock_date_matrix_tbl\numap_kmeans_results_tbl <- k_means_obj %>% #Begin with the `k_means_obj`\n                           bind_cols(stock_date_matrix_tbl) %>% #Augment\n                           select(symbol,k_means) %>% #Select columns\n                           left_join(umap_results_tbl,by=\"symbol\") %>%\n                           left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n# Plot the UMAP and K-Means results\numap_kmeans_plot <- ggplot(umap_kmeans_results_tbl, aes(x = V1, y = V2, color = factor(k_means))) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = palette_light() %>% rep(3)) +\n  labs(title = \"UMAP and K-Means Results\") +\n  theme_tq()\n\n# Display the UMAP and K-Means plot\nprint(umap_kmeans_plot)\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/02_supervised_ML_regression.html",
    "href": "content/01_journal/02_supervised_ML_regression.html",
    "title": "Supervised ML Regression",
    "section": "",
    "text": "The second challenge/businesscase\n\nlibrary(tidyverse)\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(rpart.plot)\n\n\n# Modeling ----------------------------------------------------------------\nbike_orderlines_tbl <- readRDS(\"bike_orderlines.rds\")\nglimpse(bike_orderlines_tbl)\n\n#> Rows: 15,644\n#> Columns: 18\n#> $ order_id       <dbl> 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7~\n#> $ order_line     <dbl> 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1~\n#> $ order_date     <dttm> 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0~\n#> $ model          <chr> \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"~\n#> $ model_year     <dbl> 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2~\n#> $ category_1     <chr> \"Mountain\", \"Road\", \"Mountain\", \"Road\", \"Mountain\", \"Hy~\n#> $ category_2     <chr> \"Trail\", \"Race\", \"Trail\", \"Triathlon Bike\", \"Dirt Jump\"~\n#> $ category_3     <chr> \"Spectral\", \"Ultimate\", \"Neuron\", \"Speedmax\", \"Stitched~\n#> $ price          <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6~\n#> $ quantity       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1~\n#> $ total_price    <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6~\n#> $ frame_material <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c~\n#> $ weight         <dbl> 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4~\n#> $ url            <chr> \"https://www.canyon.com/en-de/mountain-bikes/trail-bike~\n#> $ bikeshop       <chr> \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"~\n#> $ location       <chr> \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen~\n#> $ lat            <dbl> 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78~\n#> $ lng            <dbl> 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1~\n\nmodel_sales_tbl <- bike_orderlines_tbl %>%\n  select(total_price, model, category_2, frame_material) %>%\n  \n  group_by(model, category_2, frame_material) %>%\n  summarise(total_sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  arrange(desc(total_sales))\n\n#> `summarise()` has grouped output by 'model', 'category_2'. You can override\n#> using the `.groups` argument.\n\nmodel_sales_tbl %>%\n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(total_sales, .fun = max) %>% \n           fct_rev()) %>%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  #coord_flip() +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(\n    title = \"Total Sales for Each Model\",\n    x = \"Frame Material\", y = \"Revenue\"\n  )\n\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n#> Warning in max(data$density): kein nicht-fehlendes Argument für max; gebe -Inf\n#> zurück\n\n\n#> Warning: Computation failed in `stat_ydensity()`\n#> Caused by error in `$<-.data.frame`:\n#> ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\nbike_features_tbl <- readRDS(\"bike_features_tbl.rds\")\nglimpse(bike_features_tbl)\n\n#> Rows: 231\n#> Columns: 67\n#> $ bike_id                     <dbl> 2875, 2873, 2874, 2876, 2877, 2225, 2091, ~\n#> $ model                       <chr> \"Aeroad CF SL Disc 8.0 Di2\", \"Aeroad CF SL~\n#> $ model_year                  <dbl> 2020, 2020, 2020, 2020, 2020, 2019, 2019, ~\n#> $ frame_material              <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"c~\n#> $ weight                      <dbl> 7.60, 7.27, 7.10, 7.73, 7.83, 6.80, 6.80, ~\n#> $ price                       <dbl> 4579, 6919, 6429, 5069, 3609, 6139, 5359, ~\n#> $ category_1                  <chr> \"Road\", \"Road\", \"Road\", \"Road\", \"Road\", \"R~\n#> $ category_2                  <chr> \"Race\", \"Race\", \"Race\", \"Race\", \"Race\", \"R~\n#> $ category_3                  <chr> \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroad\", \"A~\n#> $ gender                      <chr> \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"u~\n#> $ url                         <chr> \"https://www.canyon.com/en-de/road-bikes/r~\n#> $ Frame                       <chr> \"Canyon Aeroad CF SL Disc\", \"Canyon Aeroad~\n#> $ Fork                        <chr> \"Canyon FK0041 CF SLX Disc\", \"Canyon FK004~\n#> $ `Rear Derailleur`           <chr> \"Shimano Ultegra Di2 R8050 SS\", \"SRAM RED ~\n#> $ `Front Derailleur`          <chr> \"Shimano Ultegra Di2 R8050\", \"SRAM RED eTa~\n#> $ Cassette                    <chr> \"Shimano Ultegra R8000, 11-speed, 11-28T\",~\n#> $ Crank                       <chr> \"Shimano Ultegra R8000\", \"SRAM RED D1\", \"S~\n#> $ `Bottom bracket`            <chr> \"Shimano Pressfit BB72\", \"SRAM Pressfit RE~\n#> $ `Thru Axle`                 <chr> \"Canyon Thru Axle\", \"Canyon Thru Axle\", \"C~\n#> $ Cockpit                     <chr> \"Canyon H36 Aerocockpit CF\", \"Canyon H36 A~\n#> $ Saddle                      <chr> \"Selle Italia SLR\", \"Selle Italia SLR\", \"S~\n#> $ Seatpost                    <chr> \"Canyon S27 Aero VCLS CF\", \"Canyon S27 Aer~\n#> $ Pedals                      <chr> \"None included\", \"None included\", \"None in~\n#> $ `Derailleur hanger`         <chr> \"Shop Derailleur Hanger GP0211-01\", \"Shop ~\n#> $ Battery                     <chr> \"\", \"SRAM eTap Powerpack\", \"\", \"SRAM eTap ~\n#> $ Brake                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Shift Lever`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano Di2 Remot~\n#> $ Chain                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano CN-HG901 ~\n#> $ Stem                        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon V13\", ~\n#> $ Handlebar                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon H16 Ae~\n#> $ Headset                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ Motor                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Battery Charger`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Flat Pedals`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ Chainguard                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Aero Bar`                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Brake Lever / Master`      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Wheel Tire System`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Suspension Fork`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Disc Brake`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ Grips                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ Chainring                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ Display                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ Modeswitch                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Rear Shock`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ Light                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ Fender                      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Bike Racks`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Brake 1`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou~\n#> $ `Brake 2`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou~\n#> $ `Shift-/ Brake Lever 1`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR~\n#> $ `Shift-/ Brake Lever 2`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR~\n#> $ `Wheel 1`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1~\n#> $ `Wheel 2`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1~\n#> $ `Tyre 1`                    <chr> \"Continental Grand Prix 5000 / Attack  23 ~\n#> $ `Tyre 2`                    <chr> \"Continental Grand Prix 5000, 25 mm\", \"Con~\n#> $ `Handlebar Tape 1`          <chr> \"Canyon Ergospeed Gel\", \"Canyon Ergospeed ~\n#> $ `Handlebar Tape 2`          <chr> \"Canyon bar-end plug\", \"Canyon bar-end plu~\n#> $ `Manuals and Accessories 1` <chr> \"Canyon tool case\", \"Canyon tool case\", \"C~\n#> $ `Manuals and Accessories 2` <chr> \"DT Swiss warranty & intended use manual\",~\n#> $ `Manuals and Accessories 3` <chr> \"Canyon starter box\", \"Canyon starter box\"~\n#> $ `Manuals and Accessories 4` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"BAG R~\n#> $ `Manuals and Accessories 5` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Manuals and Accessories 6` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Manuals and Accessories 7` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Manuals and Accessories 8` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n#> $ `Brake Rotor`               <list> \"Shimano RT800\", \"SRAM Centerline X\", \"Sh~\n\n  # 2.0 TRAINING & TEST SETS ----\nbike_features_tbl <- bike_features_tbl %>% \n  \n  mutate(id = row_number()) %>% \n  \n  select(id, everything(), -url)\n\n\n# Create a recipe object\nbike_recipe <- recipe(price ~ frame_material + category_2 + model, data = bike_orderlines_tbl) %>% #Predict price from frame_material, category_2 and model\n  step_dummy(all_nominal(),-frame_material,-category_2,-model,one_hot = T) %>% #Remove all others\n  prep() #Estimate the required parameters\n\n\nbike_orderlines_tbl %>% distinct(category_2)\n\n\n\n  \n\n\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(bike_orderlines_tbl, prop   = 0.80, \n                                                       strata = \"category_2\")\n\n# Check if testing contains all category_2 values\nsplit_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\n# Assign training and test data\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\n# remove spaces and dashes from the column names\ntrain_tbl <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\ntrain_transformed_tbl <- bake(bike_recipe, new_data = train_tbl) #Create training and test data sets\ntest_transformed_tbl <- bake(bike_recipe, new_data = test_tbl) \n\n\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>% #Create linear regression model\n    set_engine(\"lm\")\n\n\nlibrary(workflows)\n\n#Creating workflow\nworkflow <- workflow(preprocessor = NULL, spec = NULL) %>% \n  workflows::add_recipe(bike_recipe) %>% #Adding recipe\n  workflows::add_model(model_01_linear_lm_simple) #Adding model\n\nfitted_workflow <- fit(workflow, train_transformed_tbl) #Estimate model parameters from training set\n\nmetrics <- fitted_workflow %>%\n           predict(new_data = test_transformed_tbl) %>% #Predict from test data set\n           bind_cols(test_transformed_tbl %>% select(price)) %>%\n           yardstick::metrics(truth = price, estimate = .pred) %>% print() #Print yardstick metrics\n\n#> Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#> \"response\"): prediction from a rank-deficient fit may be misleading\n\n\n#> # A tibble: 3 x 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 rmse    standard      56.0  \n#> 2 rsq     standard       0.999\n#> 3 mae     standard       7.40"
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html",
    "title": "Automated Maschine Learning with H2O",
    "section": "",
    "text": "library(h2o)\nh2o.init() #starting h2o\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 hours 42 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 15 days \n#>     H2O cluster name:           H2O_started_from_R_Julius_kbr396 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.69 GB \n#>     H2O cluster total cores:    3 \n#>     H2O cluster allowed cores:  3 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.0.5 (2021-03-31)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 15 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n\n\nlibrary(tidyverse)\n\n#> -- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\n#> v dplyr     1.1.2     v readr     2.1.4\n#> v forcats   1.0.0     v stringr   1.5.0\n#> v ggplot2   3.4.2     v tibble    3.2.1\n#> v lubridate 1.9.2     v tidyr     1.3.0\n#> v purrr     1.0.1     \n#> -- Conflicts ------------------------------------------ tidyverse_conflicts() --\n#> x lubridate::day()   masks h2o::day()\n#> x dplyr::filter()    masks stats::filter()\n#> x lubridate::hour()  masks h2o::hour()\n#> x dplyr::lag()       masks stats::lag()\n#> x lubridate::month() masks h2o::month()\n#> x lubridate::week()  masks h2o::week()\n#> x lubridate::year()  masks h2o::year()\n#> i Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\ncar_stats <- function(groupby_var, measure_var) {\n    groupby_var <- enquo(groupby_var)\n    measure_var <- enquo(measure_var)\n    ret <- mtcars %>% \n             group_by(!!groupby_var) %>%\n             summarize(min = min(!!measure_var), max = max(!!measure_var)) %>%\n             # Optional: as_label() and \"walrus operator\" :=\n             mutate(measure_var = as_label(measure_var), !!measure_var := \"test\")\n    return(ret)\n}\ncar_stats(cyl,hp)\n\n\n\n  \n\n\nscatter_plot <- function(data, x_var, y_var) {\n  x_var <- enquo(x_var)\n  y_var <- enquo(y_var)\n  ret <- data %>% \n           ggplot(aes(x = !!x_var, y = !!y_var)) + \n           geom_point() + \n           geom_smooth() +\n           ggtitle(str_c(as_label(y_var), \" vs. \",as_label(x_var)))\n  return(ret)\n}\nscatter_plot(mtcars, cyl, hp)\n\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n#> Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n#> : pseudoinverse used at 3.98\n\n\n#> Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n#> : neighborhood radius 4.02\n\n\n#> Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n#> : reciprocal condition number 2.0055e-016\n\n\n#> Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n#> : There are other near singularities as well. 16.16\n\n\n#> Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\n#> else if (is.data.frame(newdata))\n#> as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at\n#> 3.98\n\n\n#> Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\n#> else if (is.data.frame(newdata))\n#> as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius\n#> 4.02\n\n\n#> Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\n#> else if (is.data.frame(newdata))\n#> as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition\n#> number 2.0055e-016\n\n\n#> Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\n#> else if (is.data.frame(newdata))\n#> as.matrix(model.frame(delete.response(terms(object)), : There are other near\n#> singularities as well. 16.16\n\n\n\n\n\n\n\n\n\nlibrary(readr)\n# Load data\nemployee_attrition_tbl <- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#> Rows: 1470 Columns: 35\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Business & Data Understanding: Department and Job Role\n\n# Data subset\ndept_job_role_tbl <- employee_attrition_tbl %>%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\n\ndept_job_role_tbl %>%\n\n  group_by(Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n# Attrition by department\ndept_job_role_tbl %>%\n\n  # Block 1\n  group_by(Department, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n\n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %>%\n  mutate(pct = n / sum(n))\n\n#> `summarise()` has grouped output by 'Department'. You can override using the\n#> `.groups` argument.\n\n\n\n\n  \n\n\n# Attrition by job role\ndept_job_role_tbl %>%\n\n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n\n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n\n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\n# Use this\n# Function to convert counts to percentages. \ncount_to_pct <- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr <- quos(...)\n  col_expr <- enquo(col)\n  ret <- data %>%\n    group_by(!!! grouping_vars_expr) %>%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %>%\n    ungroup()\n  return(ret)\n}\n\nassess_attrition <- function(data, attrition_col, attrition_value, baseline_pct) {\n\n  attrition_col_expr <- enquo(attrition_col)\n\n  data %>%\n  \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %>%\n    arrange(desc(pct)) %>%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct > baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n\n}\n\n# Function to calculate attrition cost\ncalculate_attrition_cost <- function(\n\n  # Employee\n  n                    = 1,\n  salary               = 80000,\n\n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n\n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n\n) {\n\n  # Direct Costs\n  direct_cost <- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n\n  # Lost Productivity Costs\n  productivity_cost <- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n\n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction <- salary / workdays_per_year * workdays_position_open\n\n  # Estimated Turnover Per Employee\n  cost_per_employee <- direct_cost + productivity_cost - salary_benefit_reduction\n\n  # Total Cost of Employee Turnover\n  total_cost <- n * cost_per_employee\n\n  return(total_cost)\n\n}\n\n# Function to plot attrition\nplot_attrition <- function(data, \n                           ..., \n                           .value,\n                           fct_reorder = TRUE,\n                           fct_rev     = FALSE,\n                           include_lbl = TRUE,\n                           color       = \"#2dc6d6\",\n                           units       = c(\"0\", \"K\", \"M\")) {\n\n  ### Inputs\n  group_vars_expr   <- quos(...)\n  \n  # If the user does not supply anything, \n  # this takes the first column of the supplied data\n  if (length(group_vars_expr) == 0) {\n    group_vars_expr <- quos(rlang::sym(colnames(data)[[1]]))\n    }\n\n  value_expr <- enquo(.value)\n\n  units_val  <- switch(units[[1]],\n                       \"M\" = 1e6,\n                       \"K\" = 1e3,\n                       \"0\" = 1)\n  if (units[[1]] == \"0\") units <- \"\"\n\n  # Data Manipulation\n  # This is a so called Function Factory (a function that produces a function)\n  usd <- scales::dollar_format(prefix = \"$\", largest_with_cents = 1e3)\n\n  # Create the axis labels and values for the plot\n  data_manipulated <- data %>%\n    mutate(name = str_c(!!! group_vars_expr, sep = \": \") %>% as_factor()) %>%\n    mutate(value_text = str_c(usd(!! value_expr / units_val),\n                              units[[1]], sep = \"\"))\n\n  \n  # Order the labels on the y-axis according to the input\n  if (fct_reorder) {\n    data_manipulated <- data_manipulated %>%\n      mutate(name = forcats::fct_reorder(name, !! value_expr)) %>%\n      arrange(name)\n  }\n\n  if (fct_rev) {\n    data_manipulated <- data_manipulated %>%\n      mutate(name = forcats::fct_rev(name)) %>%\n      arrange(name)\n  }\n\n  # Visualization\n  g <- data_manipulated %>%\n\n        # \"name\" is a column name generated by our function internally as part of the data manipulation task\n        ggplot(aes(x = (!! value_expr), y = name)) +\n        geom_segment(aes(xend = 0, yend = name), color = color) +\n        geom_point(aes(size = !! value_expr), color = color) +\n        scale_x_continuous(labels = scales::dollar) +\n        scale_size(range = c(3, 5)) +\n        theme(legend.position = \"none\")\n\n  # Plot labels if TRUE\n  if (include_lbl) {\n    g <- g +\n      geom_label(aes(label = value_text, size = !! value_expr),\n                 hjust = \"inward\", color = color)\n  }\n\n  return(g)\n\n}\n\ndept_job_role_tbl %>%\n\n  # Block 1\n  count(Department, JobRole, Attrition) %>%\n\n  # Block 2\n  count_to_pct(Department, JobRole) %>%  \n\n  # Block 3\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %>%\n\n  # Block 4. Set salaray to 80000 for now\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %>%\n\n  # Select columnns\n  plot_attrition(Department, JobRole, .value = cost_of_attrition,\n                 units = \"M\") +\n  labs(\n    title = \"Estimated Cost of Attrition by Job Role\",\n    x = \"Cost of Attrition\",\n    subtitle = \"Looks like Sales Executive and Labaratory Technician are the biggest drivers of cost\"\n  )\n\n\n\n\n\n\n\n\n# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n#> Registered S3 method overwritten by 'GGally':\n#>   method from   \n#>   +.gg   ggplot2\n\n# Load Data data definitions\n\npath_data_definitions <- \"data_definitions.xlsx\"\ndefinitions_raw_tbl   <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\n#> New names:\n#> * `` -> `...1`\n#> * `` -> `...2`\n\nemployee_attrition_tbl\n\n\n\n  \n\n\n# Descriptive Features\nemployee_attrition_tbl %>% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n\n\n  \n\n\n# Employment Features\nemployee_attrition_tbl %>% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n\n\n  \n\n\n# Compensation Features\nemployee_attrition_tbl %>% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n\n\n  \n\n\n# Survery Results\nemployee_attrition_tbl %>% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n\n\n  \n\n\n# Performance Data\nemployee_attrition_tbl %>% select(JobInvolvement, PerformanceRating)\n\n\n\n  \n\n\n# Work-Life Features\nemployee_attrition_tbl %>% select(BusinessTravel, OverTime)\n\n\n\n  \n\n\n# Training & Education\nemployee_attrition_tbl %>% select(Education, EducationField, TrainingTimesLastYear)\n\n\n\n  \n\n\n# Time-Based Features\nemployee_attrition_tbl %>% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n\n\n  \n\n\n\n\n# Step 1: Data Summarization -----\n\nskim(employee_attrition_tbl)\n\n\nData summary\n\n\nName\nemployee_attrition_tbl\n\n\nNumber of rows\n1470\n\n\nNumber of columns\n35\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n9\n\n\nnumeric\n26\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\nAttrition\n0\n1\n2\n3\n0\n2\n0\n\n\nBusinessTravel\n0\n1\n10\n17\n0\n3\n0\n\n\nDepartment\n0\n1\n5\n22\n0\n3\n0\n\n\nEducationField\n0\n1\n5\n16\n0\n6\n0\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nJobRole\n0\n1\n7\n25\n0\n9\n0\n\n\nMaritalStatus\n0\n1\n6\n8\n0\n3\n0\n\n\nOver18\n0\n1\n1\n1\n0\n1\n0\n\n\nOverTime\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nAge\n0\n1\n36.92\n9.14\n18\n30.00\n36.0\n43.00\n60\n▂▇▇▃▂\n\n\nDailyRate\n0\n1\n802.49\n403.51\n102\n465.00\n802.0\n1157.00\n1499\n▇▇▇▇▇\n\n\nDistanceFromHome\n0\n1\n9.19\n8.11\n1\n2.00\n7.0\n14.00\n29\n▇▅▂▂▂\n\n\nEducation\n0\n1\n2.91\n1.02\n1\n2.00\n3.0\n4.00\n5\n▂▃▇▆▁\n\n\nEmployeeCount\n0\n1\n1.00\n0.00\n1\n1.00\n1.0\n1.00\n1\n▁▁▇▁▁\n\n\nEmployeeNumber\n0\n1\n1024.87\n602.02\n1\n491.25\n1020.5\n1555.75\n2068\n▇▇▇▇▇\n\n\nEnvironmentSatisfaction\n0\n1\n2.72\n1.09\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nHourlyRate\n0\n1\n65.89\n20.33\n30\n48.00\n66.0\n83.75\n100\n▇▇▇▇▇\n\n\nJobInvolvement\n0\n1\n2.73\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▁\n\n\nJobLevel\n0\n1\n2.06\n1.11\n1\n1.00\n2.0\n3.00\n5\n▇▇▃▂▁\n\n\nJobSatisfaction\n0\n1\n2.73\n1.10\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nMonthlyIncome\n0\n1\n6502.93\n4707.96\n1009\n2911.00\n4919.0\n8379.00\n19999\n▇▅▂▁▂\n\n\nMonthlyRate\n0\n1\n14313.10\n7117.79\n2094\n8047.00\n14235.5\n20461.50\n26999\n▇▇▇▇▇\n\n\nNumCompaniesWorked\n0\n1\n2.69\n2.50\n0\n1.00\n2.0\n4.00\n9\n▇▃▂▂▁\n\n\nPercentSalaryHike\n0\n1\n15.21\n3.66\n11\n12.00\n14.0\n18.00\n25\n▇▅▃▂▁\n\n\nPerformanceRating\n0\n1\n3.15\n0.36\n3\n3.00\n3.0\n3.00\n4\n▇▁▁▁▂\n\n\nRelationshipSatisfaction\n0\n1\n2.71\n1.08\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nStandardHours\n0\n1\n80.00\n0.00\n80\n80.00\n80.0\n80.00\n80\n▁▁▇▁▁\n\n\nStockOptionLevel\n0\n1\n0.79\n0.85\n0\n0.00\n1.0\n1.00\n3\n▇▇▁▂▁\n\n\nTotalWorkingYears\n0\n1\n11.28\n7.78\n0\n6.00\n10.0\n15.00\n40\n▇▇▂▁▁\n\n\nTrainingTimesLastYear\n0\n1\n2.80\n1.29\n0\n2.00\n3.0\n3.00\n6\n▂▇▇▂▃\n\n\nWorkLifeBalance\n0\n1\n2.76\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▂\n\n\nYearsAtCompany\n0\n1\n7.01\n6.13\n0\n3.00\n5.0\n9.00\n40\n▇▂▁▁▁\n\n\nYearsInCurrentRole\n0\n1\n4.23\n3.62\n0\n2.00\n3.0\n7.00\n18\n▇▃▂▁▁\n\n\nYearsSinceLastPromotion\n0\n1\n2.19\n3.22\n0\n0.00\n1.0\n3.00\n15\n▇▁▁▁▁\n\n\nYearsWithCurrManager\n0\n1\n4.12\n3.57\n0\n2.00\n3.0\n7.00\n17\n▇▂▅▁▁\n\n\n\n\n# Character Data Type\nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    glimpse()\n\n#> Rows: 1,470\n#> Columns: 9\n#> $ Attrition      <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",~\n#> $ BusinessTravel <chr> \"Travel_Rarely\", \"Travel_Frequently\", \"Travel_Rarely\", ~\n#> $ Department     <chr> \"Sales\", \"Research & Development\", \"Research & Developm~\n#> $ EducationField <chr> \"Life Sciences\", \"Life Sciences\", \"Other\", \"Life Scienc~\n#> $ Gender         <chr> \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Male\", \"Fe~\n#> $ JobRole        <chr> \"Sales Executive\", \"Research Scientist\", \"Laboratory Te~\n#> $ MaritalStatus  <chr> \"Single\", \"Married\", \"Single\", \"Married\", \"Married\", \"S~\n#> $ Over18         <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", ~\n#> $ OverTime       <chr> \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\", \"No~\n\n# Get \"levels\"\nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    map(unique)\n\n#> $Attrition\n#> [1] \"Yes\" \"No\" \n#> \n#> $BusinessTravel\n#> [1] \"Travel_Rarely\"     \"Travel_Frequently\" \"Non-Travel\"       \n#> \n#> $Department\n#> [1] \"Sales\"                  \"Research & Development\" \"Human Resources\"       \n#> \n#> $EducationField\n#> [1] \"Life Sciences\"    \"Other\"            \"Medical\"          \"Marketing\"       \n#> [5] \"Technical Degree\" \"Human Resources\" \n#> \n#> $Gender\n#> [1] \"Female\" \"Male\"  \n#> \n#> $JobRole\n#> [1] \"Sales Executive\"           \"Research Scientist\"       \n#> [3] \"Laboratory Technician\"     \"Manufacturing Director\"   \n#> [5] \"Healthcare Representative\" \"Manager\"                  \n#> [7] \"Sales Representative\"      \"Research Director\"        \n#> [9] \"Human Resources\"          \n#> \n#> $MaritalStatus\n#> [1] \"Single\"   \"Married\"  \"Divorced\"\n#> \n#> $Over18\n#> [1] \"Y\"\n#> \n#> $OverTime\n#> [1] \"Yes\" \"No\"\n\n# Proportions    \nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    map(~ table(.) %>% prop.table())\n\n#> $Attrition\n#> .\n#>        No       Yes \n#> 0.8387755 0.1612245 \n#> \n#> $BusinessTravel\n#> .\n#>        Non-Travel Travel_Frequently     Travel_Rarely \n#>         0.1020408         0.1884354         0.7095238 \n#> \n#> $Department\n#> .\n#>        Human Resources Research & Development                  Sales \n#>             0.04285714             0.65374150             0.30340136 \n#> \n#> $EducationField\n#> .\n#>  Human Resources    Life Sciences        Marketing          Medical \n#>       0.01836735       0.41224490       0.10816327       0.31564626 \n#>            Other Technical Degree \n#>       0.05578231       0.08979592 \n#> \n#> $Gender\n#> .\n#> Female   Male \n#>    0.4    0.6 \n#> \n#> $JobRole\n#> .\n#> Healthcare Representative           Human Resources     Laboratory Technician \n#>                0.08911565                0.03537415                0.17619048 \n#>                   Manager    Manufacturing Director         Research Director \n#>                0.06938776                0.09863946                0.05442177 \n#>        Research Scientist           Sales Executive      Sales Representative \n#>                0.19863946                0.22176871                0.05646259 \n#> \n#> $MaritalStatus\n#> .\n#>  Divorced   Married    Single \n#> 0.2224490 0.4578231 0.3197279 \n#> \n#> $Over18\n#> .\n#> Y \n#> 1 \n#> \n#> $OverTime\n#> .\n#>        No       Yes \n#> 0.7170068 0.2829932\n\n# Numeric Data\nemployee_attrition_tbl %>%\n    select_if(is.numeric) %>%\n    map(~ unique(.) %>% length())\n\n#> $Age\n#> [1] 43\n#> \n#> $DailyRate\n#> [1] 886\n#> \n#> $DistanceFromHome\n#> [1] 29\n#> \n#> $Education\n#> [1] 5\n#> \n#> $EmployeeCount\n#> [1] 1\n#> \n#> $EmployeeNumber\n#> [1] 1470\n#> \n#> $EnvironmentSatisfaction\n#> [1] 4\n#> \n#> $HourlyRate\n#> [1] 71\n#> \n#> $JobInvolvement\n#> [1] 4\n#> \n#> $JobLevel\n#> [1] 5\n#> \n#> $JobSatisfaction\n#> [1] 4\n#> \n#> $MonthlyIncome\n#> [1] 1349\n#> \n#> $MonthlyRate\n#> [1] 1427\n#> \n#> $NumCompaniesWorked\n#> [1] 10\n#> \n#> $PercentSalaryHike\n#> [1] 15\n#> \n#> $PerformanceRating\n#> [1] 2\n#> \n#> $RelationshipSatisfaction\n#> [1] 4\n#> \n#> $StandardHours\n#> [1] 1\n#> \n#> $StockOptionLevel\n#> [1] 4\n#> \n#> $TotalWorkingYears\n#> [1] 40\n#> \n#> $TrainingTimesLastYear\n#> [1] 7\n#> \n#> $WorkLifeBalance\n#> [1] 4\n#> \n#> $YearsAtCompany\n#> [1] 37\n#> \n#> $YearsInCurrentRole\n#> [1] 19\n#> \n#> $YearsSinceLastPromotion\n#> [1] 16\n#> \n#> $YearsWithCurrManager\n#> [1] 18\n\nemployee_attrition_tbl %>%\n    select_if(is.numeric) %>%\n    map_df(~ unique(.) %>% length()) %>%\n    # Select all columns\n    pivot_longer(everything()) %>%\n    arrange(value) %>%\n    filter(value <= 10)\n\n\n\n  \n\n\n\n\nlibrary(GGally)\n# Step 2: Data Visualization ----\n\n# Create data tibble, to potentially debug the plot_ggpairs function (because it has a data argument)\ndata <- employee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome)\n\nplot_ggpairs <- function(data, color = NULL, density_alpha = 0.5) {\n    \n    color_expr <- enquo(color)\n    \n    if (rlang::quo_is_null(color_expr)) {\n        \n        g <- data %>%\n            ggpairs(lower = \"blank\") \n        \n    } else {\n        \n        color_name <- quo_name(color_expr)\n        \n        g <- data %>%\n            ggpairs(mapping = aes_string(color = color_name), \n                    lower = \"blank\", legend = 1,\n                    diag = list(continuous = wrap(\"densityDiag\", \n                                                  alpha = density_alpha))) +\n            theme(legend.position = \"bottom\")\n    }\n    \n    return(g)\n    \n}\n\nemployee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n    plot_ggpairs(color = Attrition)\n\n#> Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#> i Please use tidy evaluation idioms with `aes()`.\n#> i See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n\n# Explore Features by Category\n\n#   1. Descriptive features: age, gender, marital status \nemployee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   2. Employment features: department, job role, job level\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %>%\n    plot_ggpairs(Attrition) \n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n#> Warning in cor(x, y): Standardabweichung ist Null\n\n\n\n\n\n\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   5. Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"performance\"), contains(\"involvement\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   6. Work-Life Features \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"overtime\"), contains(\"travel\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   7. Training and Education \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"training\"), contains(\"education\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"years\")) %>%\n    plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-1-what-can-you-deduce-about-the-interaction-between-monthly-income-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-1-what-can-you-deduce-about-the-interaction-between-monthly-income-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.1 Question 1 | What can you deduce about the interaction between Monthly Income and Attrition?",
    "text": "2.1 Question 1 | What can you deduce about the interaction between Monthly Income and Attrition?\nThe data suggests a significant spike in attrition among individuals with lower monthly incomes, indicating a strong correlation between monthly income and attrition. In contrast, there is a relatively lower number of individuals with low monthly incomes who do not experience attrition."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-2-what-can-you-deduce-about-the-interaction-between-percent-salary-hike-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-2-what-can-you-deduce-about-the-interaction-between-percent-salary-hike-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.2 Question 2 | What can you deduce about the interaction between Percent Salary Hike and Attrition?",
    "text": "2.2 Question 2 | What can you deduce about the interaction between Percent Salary Hike and Attrition?\nThe attrition patterns related to percent salary hike are nearly identical for individuals with and without attrition. This similarity indicates that the percent salary hike has minimal impact on attrition."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-3-what-can-you-deduce-about-the-interaction-between-stock-option-level-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-3-what-can-you-deduce-about-the-interaction-between-stock-option-level-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.3 Question 3 | What can you deduce about the interaction between Stock Option Level and Attrition?",
    "text": "2.3 Question 3 | What can you deduce about the interaction between Stock Option Level and Attrition?\nThe attrition rates based on stock option level reveal that individuals with a stock option level of 1, and to a lesser extent 2, are less likely to experience high attrition. This suggests a potential positive correlation between stock option level and attrition for the employer."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-4-what-can-you-deduce-about-the-interaction-between-environment-satisfaction-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-4-what-can-you-deduce-about-the-interaction-between-environment-satisfaction-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.4 Question 4 | What can you deduce about the interaction between Environment Satisfaction and Attrition?",
    "text": "2.4 Question 4 | What can you deduce about the interaction between Environment Satisfaction and Attrition?\nThe distribution of satisfaction levels in the survey appears to be clustered, likely due to the use of a numerical scale (e.g., rating from 1 to 4). Considering this, there is an upward trend in the number of individuals without attrition as the satisfaction levels increase."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-5-what-can-you-deduce-about-the-interaction-between-work-life-balance-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-5-what-can-you-deduce-about-the-interaction-between-work-life-balance-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.5 Question 5 | What can you deduce about the interaction between Work Life Balance and Attrition",
    "text": "2.5 Question 5 | What can you deduce about the interaction between Work Life Balance and Attrition\nThere appears to be a stronger association between work-life balance and attrition, with individuals who rate their work-life balance more positively experiencing lower attrition rates."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-6-what-can-you-deduce-about-the-interaction-between-job-involvement-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-6-what-can-you-deduce-about-the-interaction-between-job-involvement-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.6 Question 6 | What Can you deduce about the interaction between Job Involvement and Attrition?",
    "text": "2.6 Question 6 | What Can you deduce about the interaction between Job Involvement and Attrition?\nIndividuals who exhibit higher job involvement are less likely to experience attrition."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-7-what-can-you-deduce-about-the-interaction-between-over-time-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-7-what-can-you-deduce-about-the-interaction-between-over-time-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.7 Question 7 | What can you deduce about the interaction between Over Time and Attrition?",
    "text": "2.7 Question 7 | What can you deduce about the interaction between Over Time and Attrition?\nWhile the absolute numbers of individuals with and without attrition who perform overtime are similar, the percentage of individuals performing overtime is significantly higher among those who experience attrition. This indicates that individuals engaging in overtime work are more prone to attrition."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-8-what-can-you-deduce-about-the-interaction-between-training-times-last-year-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-8-what-can-you-deduce-about-the-interaction-between-training-times-last-year-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.8 Question 8 | What can you deduce about the interaction between Training Times Last Year and Attrition",
    "text": "2.8 Question 8 | What can you deduce about the interaction between Training Times Last Year and Attrition\nThere is a slight trend suggesting that increased training time is associated with lower attrition rates, although the effect appears to be minor."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-9-what-can-you-deduce-about-the-interaction-between-years-at-company-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-9-what-can-you-deduce-about-the-interaction-between-years-at-company-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.9 Question 9 | What can you deduce about the interaction between Years At Company and Attrition",
    "text": "2.9 Question 9 | What can you deduce about the interaction between Years At Company and Attrition\nRegarding years at the company, attrition rates are notably higher among newly hired individuals compared to those who have been with the company for an extended period. Additionally, individuals with longer tenures exhibit significantly lower attrition rates. It’s important to note that the data may be skewed since individuals with high attrition likely left the company at some point."
  },
  {
    "objectID": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-10-what-can-you-deduce-about-the-interaction-between-years-since-last-promotion-and-attrition",
    "href": "content/01_journal/03_automated_maschine_learning_with_H2O.html#question-10-what-can-you-deduce-about-the-interaction-between-years-since-last-promotion-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "\n2.10 Question 10 | What can you deduce about the interaction between Years Since Last Promotion and Attrition?",
    "text": "2.10 Question 10 | What can you deduce about the interaction between Years Since Last Promotion and Attrition?\nYears since the last promotion have a relatively small effect on attrition. However, there is a slight increase in attrition among individuals who have been with the company for an extended period without receiving a promotion. This indicates that prolonged periods without promotions may contribute to higher attrition rates."
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html",
    "href": "content/01_journal/04_performance_measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "The business case is not uploaded because it does not run without error messages."
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#data-loading-and-running-automl",
    "href": "content/01_journal/04_performance_measures.html#data-loading-and-running-automl",
    "title": "Performance Measures",
    "section": "\n2.1 Data loading and running AutoML",
    "text": "2.1 Data loading and running AutoML\n\nlibrary(h2o)\n\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n\n\n#> \n#> Attaching package: 'h2o'\n\n\n#> The following objects are masked from 'package:stats':\n#> \n#>     cor, sd, var\n\n\n#> The following objects are masked from 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n\nlibrary(tidyverse)\n\n#> -- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\n#> v dplyr     1.1.2     v readr     2.1.4\n#> v forcats   1.0.0     v stringr   1.5.0\n#> v ggplot2   3.4.2     v tibble    3.2.1\n#> v lubridate 1.9.2     v tidyr     1.3.0\n#> v purrr     1.0.1\n\n\n#> -- Conflicts ------------------------------------------ tidyverse_conflicts() --\n#> x lubridate::day()   masks h2o::day()\n#> x dplyr::filter()    masks stats::filter()\n#> x lubridate::hour()  masks h2o::hour()\n#> x dplyr::lag()       masks stats::lag()\n#> x lubridate::month() masks h2o::month()\n#> x lubridate::week()  masks h2o::week()\n#> x lubridate::year()  masks h2o::year()\n#> i Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(rsample)\nlibrary(readxl)\nlibrary(recipes)\n\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\n#Load the training & test dataset\nemployee_attrition_tbl          <- read_csv(\"product_backorders.csv\")\n\n#> Rows: 19053 Columns: 23\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nset.seed(seed = 1113)\nsplit_obj                       <- rsample::initial_split(employee_attrition_tbl, prop = 0.85)\ntrain_readable_tbl              <- training(split_obj)\ntest_readable_tbl               <- testing(split_obj)\n\n#Specifiy the response and predictor variables\nrecipe_obj <- recipe(went_on_backorder ~., data = train_readable_tbl) %>% \n    step_zv(all_predictors()) %>% \n    #step_mutate_at(JobLevel, StockOptionLevel, fn = as.factor) %>% \n    prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# Modeling\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         39 minutes 29 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 15 days \n#>     H2O cluster name:           H2O_started_from_R_Julius_kbr396 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.65 GB \n#>     H2O cluster total cores:    4 \n#>     H2O cluster allowed cores:  4 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.0.5 (2021-03-31)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 15 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\n#Run AutoML specifying the stopping criterion\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n) \n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===                                                                   |   4%\n#> 12:08:29.691: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 12:08:29.692: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |==========================================                            |  59%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |======================================================================| 100%"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#leaderboard-visualization",
    "href": "content/01_journal/04_performance_measures.html#leaderboard-visualization",
    "title": "Performance Measures",
    "section": "\n2.2 1. Leaderboard visualization",
    "text": "2.2 1. Leaderboard visualization\n\nplot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n\n    # Setup inputs\n    # adjust input so that all formats are working\n    order_by <- tolower(order_by[[1]])\n\n    leaderboard_tbl <- h2o_leaderboard %>%\n        as.tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        rownames_to_column(var = \"rowname\") %>%\n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as.factor())\n\n    # Transformation\n    if (order_by == \"auc\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(auc),\n                model_type = as.factor(model_type)\n            ) %>%\n                pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else if (order_by == \"logloss\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),\n                model_type = as.factor(model_type)\n            ) %>%\n            pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else {\n        # If nothing is supplied\n        stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n    }\n\n    # Visualization\n    g <- data_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = size) +\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n             y = \"Model Postion, Model ID\", x = \"\")\n\n    if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), \n                                             hjust = \"inward\"))\n\n    return(g)\n  \n}  \nplot_h2o_leaderboard(automl_models_h2o@leaderboard)\n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> i Please use `as_tibble()` instead.\n#> i The signature and semantics have changed, see `?as_tibble`."
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#tune-a-model-with-grid-search",
    "href": "content/01_journal/04_performance_measures.html#tune-a-model-with-grid-search",
    "title": "Performance Measures",
    "section": "\n2.3 2. Tune a model with grid search",
    "text": "2.3 2. Tune a model with grid search\n\ndeeplearning_grid_01 <- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: deeplearning_grid_01 \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 45 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>      epochs       hidden                     model_ids     auc\n#> 1 101.38603 [50, 20, 10] deeplearning_grid_01_model_15 0.90585\n#> 2 101.36609 [10, 10, 10] deeplearning_grid_01_model_30 0.90520\n#> 3 101.39110 [10, 10, 10]  deeplearning_grid_01_model_3 0.90389\n#> 4 101.38879 [10, 10, 10] deeplearning_grid_01_model_21 0.90389\n#> 5 101.39175 [20, 20, 20]  deeplearning_grid_01_model_9 0.90365\n#> \n#> ---\n#>      epochs       hidden                     model_ids     auc\n#> 40 10.40805 [50, 20, 10]  deeplearning_grid_01_model_4 0.80096\n#> 41 10.40154 [10, 10, 10] deeplearning_grid_01_model_10 0.79520\n#> 42 10.40251 [20, 20, 20] deeplearning_grid_01_model_43 0.79213\n#> 43 10.39383 [10, 10, 10] deeplearning_grid_01_model_37 0.78958\n#> 44 10.39519 [20, 20, 20]  deeplearning_grid_01_model_7 0.78954\n#> 45 10.40158 [10, 10, 10] deeplearning_grid_01_model_28 0.78876\n\nbest_grid_model <- h2o.getModel(deeplearning_grid_01@model_ids[[1]])\n\nbest_grid_model %>% h2o.auc(train = T, valid = T, xval = T)\n\n#>     train     valid      xval \n#> 0.9251233 0.9086407 0.9051962\n\nbest_grid_model %>% h2o.saveModel(path = \"h20_models/\",force=TRUE)\n\n#> [1] \"D:\\\\Git\\\\ss23-bdml-juliusace9000\\\\h20_models\\\\deeplearning_grid_01_model_30\"\n\nh2o.getModel(deeplearning_grid_01@model_ids[[2]]) %>% h2o.saveModel(path = \"h20_models/\",force=TRUE)\n\n#> [1] \"D:\\\\Git\\\\ss23-bdml-juliusace9000\\\\h20_models\\\\deeplearning_grid_01_model_9\"\n\nh2o.getModel(deeplearning_grid_01@model_ids[[3]]) %>% h2o.saveModel(path = \"h20_models/\",force=TRUE)\n\n#> [1] \"D:\\\\Git\\\\ss23-bdml-juliusace9000\\\\h20_models\\\\deeplearning_grid_01_model_21\""
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#visualize-the-trade-of-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "href": "content/01_journal/04_performance_measures.html#visualize-the-trade-of-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "title": "Performance Measures",
    "section": "\n2.4 3. Visualize the trade of between the precision and the recall and the optimal threshold",
    "text": "2.4 3. Visualize the trade of between the precision and the recall and the optimal threshold\n\nperformance_h2o <- h2o.performance(best_grid_model, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# This is on the test set\nperformance_tbl <- performance_h2o %>%\n    h2o.metric() %>%\n    as.tibble() \n\ntheme_new <- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n      panel.grid.major = element_line(color = \"grey\", size = 0.333)\n      )\n\n#> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#> i Please use the `linewidth` argument instead.\n\n\n#> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#> i Please use the `linewidth` argument instead.\n\nperformance_tbl %>%\n    filter(f1 == max(f1))\n\n\n\n  \n\n\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> i Please use `linewidth` instead."
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#roc-plot",
    "href": "content/01_journal/04_performance_measures.html#roc-plot",
    "title": "Performance Measures",
    "section": "\n2.5 4. ROC Plot",
    "text": "2.5 4. ROC Plot\n\n# ROC Plot\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"h20_models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %>%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n        ) %>%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#precision-vs-recall-plot",
    "href": "content/01_journal/04_performance_measures.html#precision-vs-recall-plot",
    "title": "Performance Measures",
    "section": "\n2.6 5. Precision vs Recall Plot",
    "text": "2.6 5. Precision vs Recall Plot\n\n# Precision vs Recall\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"h20_models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %>%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n    ) %>%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    theme_new + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#gain-plot",
    "href": "content/01_journal/04_performance_measures.html#gain-plot",
    "title": "Performance Measures",
    "section": "\n2.7 6. Gain Plot",
    "text": "2.7 6. Gain Plot\n\ngain_lift_tbl <- performance_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#lift-plot",
    "href": "content/01_journal/04_performance_measures.html#lift-plot",
    "title": "Performance Measures",
    "section": "\n2.8 7. Lift Plot",
    "text": "2.8 7. Lift Plot\n\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#dashboard-with-cowplot",
    "href": "content/01_journal/04_performance_measures.html#dashboard-with-cowplot",
    "title": "Performance Measures",
    "section": "\n2.9 8. Dashboard with cowplot",
    "text": "2.9 8. Dashboard with cowplot\n\nlibrary(cowplot)\n\n#> \n#> Attaching package: 'cowplot'\n\n\n#> The following object is masked from 'package:lubridate':\n#> \n#>     stamp\n\nlibrary(glue)\n\n# set values to test the function while building it\nh2o_leaderboard <- automl_models_h2o@leaderboard\nnewdata <- test_tbl\norder_by <- \"auc\"\nmax_models <- 4\nsize <- 1\n\nplot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl <- h2o_leaderboard %>%\n        as_tibble() %>%\n        slice(1:max_models)\n    \n    newdata_tbl <- newdata %>%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      <- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr <- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %>%\n            h2o.metric() %>%\n            as.tibble() %>%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n          model_id = as_factor(model_id) %>% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %>% \n                      round(3) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %>% \n                      round(4) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 <- model_metrics_tbl %>%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 <- model_metrics_tbl %>%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %>%\n            h2o.gainsLift() %>%\n            as.tibble() %>%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n            model_id = as_factor(model_id) %>% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %>% \n                round(3) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %>% \n                round(4) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id))\n        ) %>%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend <- get_legend(p1)\n    # Remove legend from p1\n    p1 <- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title <- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle <- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nautoml_models_h2o@leaderboard %>%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)"
  },
  {
    "objectID": "content/01_journal/05_black_box_models_lime.html",
    "href": "content/01_journal/05_black_box_models_lime.html",
    "title": "Explaining Black-Box Models With LIME",
    "section": "",
    "text": "# LIME FEATURE EXPLANATION ----\n\n# 1. Setup ----\n\n# Load Libraries\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\nlibrary(rsample)\n\n# Load Data\nemployee_attrition_tbl <- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#> Rows: 1470 Columns: 35\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl <- read_excel(\"data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n#> New names:\n#> * `` -> `...1`\n#> * `` -> `...2`\n\nprocess_hr_data_readable <- function(data, definitions_tbl) {\n  \n  definitions_list <- definitions_tbl %>%\n    fill(...1, .direction = \"down\") %>%\n    filter(!is.na(...2)) %>%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %>%\n    rename(column_name = ...1) %>%\n    mutate(key = as.numeric(key)) %>%\n    mutate(value = value %>% str_replace(pattern = \"'\", replacement = \"\")) %>%\n    split(.$column_name) %>%\n    map(~ select(., -column_name)) %>%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name <- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  data_merged_tbl <- list(HR_Data = data) %>%\n    append(definitions_list, after = 1) %>%\n    reduce(left_join) %>%\n    select(-one_of(names(definitions_list))) %>%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %>%\n    select(sort(names(.))) %>%\n    mutate_if(is.character, as.factor) %>%\n    mutate(\n      BusinessTravel = BusinessTravel %>% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %>% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\n\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n#> Joining with `by = join_by(Education)`\n#> Joining with `by = join_by(EnvironmentSatisfaction)`\n#> Joining with `by = join_by(JobInvolvement)`\n#> Joining with `by = join_by(JobSatisfaction)`\n#> Joining with `by = join_by(PerformanceRating)`\n#> Joining with `by = join_by(RelationshipSatisfaction)`\n#> Joining with `by = join_by(WorkLifeBalance)`\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl <- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n  step_zv(all_predictors()) %>%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %>% \n  prep()\n\nrecipe_obj\n\n#> \n#> -- Recipe ----------------------------------------------------------------------\n#> \n#> -- Inputs \n#> Number of variables by role\n#> outcome:    1\n#> predictor: 34\n#> \n#> -- Training information \n#> Training data contained 1249 data points and no incomplete rows.\n#> \n#> -- Operations \n#> * Zero variance filter removed: EmployeeCount, Over18, StandardHours | Trained\n#> * Variable mutation for: JobLevel, StockOptionLevel | Trained\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 2. Models ----\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 hours 42 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 15 days \n#>     H2O cluster name:           H2O_started_from_R_Julius_kbr396 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.69 GB \n#>     H2O cluster total cores:    3 \n#>     H2O cluster allowed cores:  3 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.0.5 (2021-03-31)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 15 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\nautoml_leader <- h2o.loadModel(\"StackedEnsemble_AllModels_3_AutoML_1_20230524_103830\")\nautoml_leader\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_1_20230524_103830 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)             6/22\n#> 3           # GBM base models (used / total)             3/16\n#> 4           # GLM base models (used / total)              1/1\n#> 5  # DeepLearning base models (used / total)              2/3\n#> 6           # DRF base models (used / total)              0/2\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.05227237\n#> RMSE:  0.2286315\n#> LogLoss:  0.1969543\n#> Mean Per-Class Error:  0.1282302\n#> AUC:  0.9436318\n#> AUCPR:  0.8650896\n#> Gini:  0.8872636\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error      Rate\n#> No     887  22 0.024202   =22/909\n#> Yes     36 119 0.232258   =36/155\n#> Totals 923 141 0.054511  =58/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.353211   0.804054 115\n#> 2                       max f2  0.218704   0.814371 166\n#> 3                 max f0point5  0.487628   0.849057  89\n#> 4                 max accuracy  0.353211   0.945489 115\n#> 5                max precision  0.977804   1.000000   0\n#> 6                   max recall  0.006961   1.000000 384\n#> 7              max specificity  0.977804   1.000000   0\n#> 8             max absolute_mcc  0.353211   0.773644 115\n#> 9   max min_per_class_accuracy  0.218704   0.877419 166\n#> 10 max mean_per_class_accuracy  0.218704   0.895255 166\n#> 11                     max tns  0.977804 909.000000   0\n#> 12                     max fns  0.977804 154.000000   0\n#> 13                     max fps  0.000598 909.000000 399\n#> 14                     max tps  0.006961 155.000000 384\n#> 15                     max tnr  0.977804   1.000000   0\n#> 16                     max fnr  0.977804   0.993548   0\n#> 17                     max fpr  0.000598   1.000000 399\n#> 18                     max tpr  0.006961   1.000000 384\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.1021012\n#> RMSE:  0.3195327\n#> LogLoss:  0.3379104\n#> Mean Per-Class Error:  0.1860007\n#> AUC:  0.8666309\n#> AUCPR:  0.7251259\n#> Gini:  0.7332617\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error     Rate\n#> No     131  16 0.108844  =16/147\n#> Yes     10  28 0.263158   =10/38\n#> Totals 141  44 0.140541  =26/185\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.284730   0.682927  43\n#> 2                       max f2  0.284730   0.714286  43\n#> 3                 max f0point5  0.508828   0.720339  19\n#> 4                 max accuracy  0.508828   0.870270  19\n#> 5                max precision  0.947288   1.000000   0\n#> 6                   max recall  0.015473   1.000000 146\n#> 7              max specificity  0.947288   1.000000   0\n#> 8             max absolute_mcc  0.284730   0.595900  43\n#> 9   max min_per_class_accuracy  0.187168   0.789474  58\n#> 10 max mean_per_class_accuracy  0.284730   0.813999  43\n#> 11                     max tns  0.947288 147.000000   0\n#> 12                     max fns  0.947288  37.000000   0\n#> 13                     max fps  0.001252 147.000000 184\n#> 14                     max tps  0.015473  38.000000 146\n#> 15                     max tnr  0.947288   1.000000   0\n#> 16                     max fnr  0.947288   0.973684   0\n#> 17                     max fpr  0.001252   1.000000 184\n#> 18                     max tpr  0.015473   1.000000 146\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.08468414\n#> RMSE:  0.2910054\n#> LogLoss:  0.3000477\n#> Mean Per-Class Error:  0.229852\n#> AUC:  0.8403279\n#> AUCPR:  0.6112159\n#> Gini:  0.6806558\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error       Rate\n#> No     843  66 0.072607    =66/909\n#> Yes     60  95 0.387097    =60/155\n#> Totals 903 161 0.118421  =126/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.306181   0.601266 134\n#> 2                       max f2  0.181081   0.660694 198\n#> 3                 max f0point5  0.437253   0.675676  88\n#> 4                 max accuracy  0.437253   0.901316  88\n#> 5                max precision  0.972862   1.000000   0\n#> 6                   max recall  0.000573   1.000000 399\n#> 7              max specificity  0.972862   1.000000   0\n#> 8             max absolute_mcc  0.437253   0.551728  88\n#> 9   max min_per_class_accuracy  0.161565   0.774194 212\n#> 10 max mean_per_class_accuracy  0.181081   0.795387 198\n#> 11                     max tns  0.972862 909.000000   0\n#> 12                     max fns  0.972862 154.000000   0\n#> 13                     max fps  0.000573 909.000000 399\n#> 14                     max tps  0.000573 155.000000 399\n#> 15                     max tnr  0.972862   1.000000   0\n#> 16                     max fnr  0.972862   0.993548   0\n#> 17                     max fpr  0.000573   1.000000 399\n#> 18                     max tpr  0.000573   1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                mean       sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy   0.878074 0.035680   0.886598   0.930131   0.874396   0.868020\n#> auc        0.840943 0.019842   0.836106   0.856784   0.857062   0.845724\n#> err        0.121926 0.035680   0.113402   0.069869   0.125604   0.131980\n#> err_count 26.000000 8.831760  22.000000  16.000000  26.000000  26.000000\n#> f0point5   0.604113 0.106673   0.596027   0.762712   0.578947   0.618280\n#>           cv_5_valid\n#> accuracy    0.831224\n#> auc         0.809041\n#> err         0.168776\n#> err_count  40.000000\n#> f0point5    0.464602\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.598318  0.138652   0.580645   0.818182   0.550000\n#> r2                  0.320058  0.067522   0.299968   0.366371   0.346930\n#> recall              0.658824  0.052632   0.666667   0.600000   0.733333\n#> residual_deviance 126.624855 15.529804 116.677710 121.308330 117.495870\n#> rmse                0.290509  0.015941   0.289599   0.268577   0.284483\n#> specificity         0.915066  0.041520   0.922156   0.979900   0.898305\n#>                   cv_4_valid cv_5_valid\n#> precision           0.605263   0.437500\n#> r2                  0.375842   0.211179\n#> recall              0.676471   0.617647\n#> residual_deviance 123.710770 153.931600\n#> rmse                0.298548   0.311335\n#> specificity         0.907975   0.866995\n\n# 3. LIME ----\n\n# 3.1 Making Predictions ----\n\npredictions_tbl <- automl_leader %>% \n  h2o.predict(newdata = as.h2o(test_tbl)) %>%\n  as.tibble() %>%\n  bind_cols(\n    test_tbl %>%\n      select(Attrition, EmployeeNumber)\n  )\n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> i Please use `as_tibble()` instead.\n#> i The signature and semantics have changed, see `?as_tibble`.\n\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl\n\n\n\n  \n\n\n# 3.2 Single Explanation ----\n\nexplainer <- train_tbl %>%\n  select(-Attrition) %>%\n  lime(\n    model = automl_leader,\n    bin_continuous = TRUE,\n    n_bins = 4,\n    quantile_bins = TRUE\n  )\n\nexplainer\n\n#> $model\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_1_20230524_103830 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)             6/22\n#> 3           # GBM base models (used / total)             3/16\n#> 4           # GLM base models (used / total)              1/1\n#> 5  # DeepLearning base models (used / total)              2/3\n#> 6           # DRF base models (used / total)              0/2\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.05227237\n#> RMSE:  0.2286315\n#> LogLoss:  0.1969543\n#> Mean Per-Class Error:  0.1282302\n#> AUC:  0.9436318\n#> AUCPR:  0.8650896\n#> Gini:  0.8872636\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error      Rate\n#> No     887  22 0.024202   =22/909\n#> Yes     36 119 0.232258   =36/155\n#> Totals 923 141 0.054511  =58/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.353211   0.804054 115\n#> 2                       max f2  0.218704   0.814371 166\n#> 3                 max f0point5  0.487628   0.849057  89\n#> 4                 max accuracy  0.353211   0.945489 115\n#> 5                max precision  0.977804   1.000000   0\n#> 6                   max recall  0.006961   1.000000 384\n#> 7              max specificity  0.977804   1.000000   0\n#> 8             max absolute_mcc  0.353211   0.773644 115\n#> 9   max min_per_class_accuracy  0.218704   0.877419 166\n#> 10 max mean_per_class_accuracy  0.218704   0.895255 166\n#> 11                     max tns  0.977804 909.000000   0\n#> 12                     max fns  0.977804 154.000000   0\n#> 13                     max fps  0.000598 909.000000 399\n#> 14                     max tps  0.006961 155.000000 384\n#> 15                     max tnr  0.977804   1.000000   0\n#> 16                     max fnr  0.977804   0.993548   0\n#> 17                     max fpr  0.000598   1.000000 399\n#> 18                     max tpr  0.006961   1.000000 384\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.1021012\n#> RMSE:  0.3195327\n#> LogLoss:  0.3379104\n#> Mean Per-Class Error:  0.1860007\n#> AUC:  0.8666309\n#> AUCPR:  0.7251259\n#> Gini:  0.7332617\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error     Rate\n#> No     131  16 0.108844  =16/147\n#> Yes     10  28 0.263158   =10/38\n#> Totals 141  44 0.140541  =26/185\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.284730   0.682927  43\n#> 2                       max f2  0.284730   0.714286  43\n#> 3                 max f0point5  0.508828   0.720339  19\n#> 4                 max accuracy  0.508828   0.870270  19\n#> 5                max precision  0.947288   1.000000   0\n#> 6                   max recall  0.015473   1.000000 146\n#> 7              max specificity  0.947288   1.000000   0\n#> 8             max absolute_mcc  0.284730   0.595900  43\n#> 9   max min_per_class_accuracy  0.187168   0.789474  58\n#> 10 max mean_per_class_accuracy  0.284730   0.813999  43\n#> 11                     max tns  0.947288 147.000000   0\n#> 12                     max fns  0.947288  37.000000   0\n#> 13                     max fps  0.001252 147.000000 184\n#> 14                     max tps  0.015473  38.000000 146\n#> 15                     max tnr  0.947288   1.000000   0\n#> 16                     max fnr  0.947288   0.973684   0\n#> 17                     max fpr  0.001252   1.000000 184\n#> 18                     max tpr  0.015473   1.000000 146\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.08468414\n#> RMSE:  0.2910054\n#> LogLoss:  0.3000477\n#> Mean Per-Class Error:  0.229852\n#> AUC:  0.8403279\n#> AUCPR:  0.6112159\n#> Gini:  0.6806558\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error       Rate\n#> No     843  66 0.072607    =66/909\n#> Yes     60  95 0.387097    =60/155\n#> Totals 903 161 0.118421  =126/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.306181   0.601266 134\n#> 2                       max f2  0.181081   0.660694 198\n#> 3                 max f0point5  0.437253   0.675676  88\n#> 4                 max accuracy  0.437253   0.901316  88\n#> 5                max precision  0.972862   1.000000   0\n#> 6                   max recall  0.000573   1.000000 399\n#> 7              max specificity  0.972862   1.000000   0\n#> 8             max absolute_mcc  0.437253   0.551728  88\n#> 9   max min_per_class_accuracy  0.161565   0.774194 212\n#> 10 max mean_per_class_accuracy  0.181081   0.795387 198\n#> 11                     max tns  0.972862 909.000000   0\n#> 12                     max fns  0.972862 154.000000   0\n#> 13                     max fps  0.000573 909.000000 399\n#> 14                     max tps  0.000573 155.000000 399\n#> 15                     max tnr  0.972862   1.000000   0\n#> 16                     max fnr  0.972862   0.993548   0\n#> 17                     max fpr  0.000573   1.000000 399\n#> 18                     max tpr  0.000573   1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                mean       sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy   0.878074 0.035680   0.886598   0.930131   0.874396   0.868020\n#> auc        0.840943 0.019842   0.836106   0.856784   0.857062   0.845724\n#> err        0.121926 0.035680   0.113402   0.069869   0.125604   0.131980\n#> err_count 26.000000 8.831760  22.000000  16.000000  26.000000  26.000000\n#> f0point5   0.604113 0.106673   0.596027   0.762712   0.578947   0.618280\n#>           cv_5_valid\n#> accuracy    0.831224\n#> auc         0.809041\n#> err         0.168776\n#> err_count  40.000000\n#> f0point5    0.464602\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.598318  0.138652   0.580645   0.818182   0.550000\n#> r2                  0.320058  0.067522   0.299968   0.366371   0.346930\n#> recall              0.658824  0.052632   0.666667   0.600000   0.733333\n#> residual_deviance 126.624855 15.529804 116.677710 121.308330 117.495870\n#> rmse                0.290509  0.015941   0.289599   0.268577   0.284483\n#> specificity         0.915066  0.041520   0.922156   0.979900   0.898305\n#>                   cv_4_valid cv_5_valid\n#> precision           0.605263   0.437500\n#> r2                  0.375842   0.211179\n#> recall              0.676471   0.617647\n#> residual_deviance 123.710770 153.931600\n#> rmse                0.298548   0.311335\n#> specificity         0.907975   0.866995\n#> \n#> $preprocess\n#> function (x) \n#> x\n#> <bytecode: 0x0000000021f26ae8>\n#> <environment: 0x000000001e3fe5e8>\n#> \n#> $bin_continuous\n#> [1] TRUE\n#> \n#> $n_bins\n#> [1] 4\n#> \n#> $quantile_bins\n#> [1] TRUE\n#> \n#> $use_density\n#> [1] TRUE\n#> \n#> $feature_type\n#>                      Age           BusinessTravel                DailyRate \n#>                \"numeric\"                 \"factor\"                \"numeric\" \n#>               Department         DistanceFromHome                Education \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>           EducationField           EmployeeNumber  EnvironmentSatisfaction \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>                   Gender               HourlyRate           JobInvolvement \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>                 JobLevel                  JobRole          JobSatisfaction \n#>                 \"factor\"                 \"factor\"                 \"factor\" \n#>            MaritalStatus            MonthlyIncome              MonthlyRate \n#>                 \"factor\"                \"numeric\"                \"numeric\" \n#>       NumCompaniesWorked                 OverTime        PercentSalaryHike \n#>                \"numeric\"                 \"factor\"                \"numeric\" \n#>        PerformanceRating RelationshipSatisfaction         StockOptionLevel \n#>                 \"factor\"                 \"factor\"                 \"factor\" \n#>        TotalWorkingYears    TrainingTimesLastYear          WorkLifeBalance \n#>                \"numeric\"                \"numeric\"                 \"factor\" \n#>           YearsAtCompany       YearsInCurrentRole  YearsSinceLastPromotion \n#>                \"numeric\"                \"numeric\"                \"numeric\" \n#>     YearsWithCurrManager \n#>                \"numeric\" \n#> \n#> $bin_cuts\n#> $bin_cuts$Age\n#>   0%  25%  50%  75% 100% \n#>   18   30   36   43   60 \n#> \n#> $bin_cuts$BusinessTravel\n#> NULL\n#> \n#> $bin_cuts$DailyRate\n#>   0%  25%  50%  75% 100% \n#>  102  465  797 1147 1499 \n#> \n#> $bin_cuts$Department\n#> NULL\n#> \n#> $bin_cuts$DistanceFromHome\n#>   0%  25%  50%  75% 100% \n#>    1    2    7   14   29 \n#> \n#> $bin_cuts$Education\n#> NULL\n#> \n#> $bin_cuts$EducationField\n#> NULL\n#> \n#> $bin_cuts$EmployeeNumber\n#>   0%  25%  50%  75% 100% \n#>    1  511 1040 1573 2065 \n#> \n#> $bin_cuts$EnvironmentSatisfaction\n#> NULL\n#> \n#> $bin_cuts$Gender\n#> NULL\n#> \n#> $bin_cuts$HourlyRate\n#>   0%  25%  50%  75% 100% \n#>   30   49   66   83  100 \n#> \n#> $bin_cuts$JobInvolvement\n#> NULL\n#> \n#> $bin_cuts$JobLevel\n#> NULL\n#> \n#> $bin_cuts$JobRole\n#> NULL\n#> \n#> $bin_cuts$JobSatisfaction\n#> NULL\n#> \n#> $bin_cuts$MaritalStatus\n#> NULL\n#> \n#> $bin_cuts$MonthlyIncome\n#>    0%   25%   50%   75%  100% \n#>  1051  2929  4908  8474 19999 \n#> \n#> $bin_cuts$MonthlyRate\n#>    0%   25%   50%   75%  100% \n#>  2094  8423 14470 20689 26968 \n#> \n#> $bin_cuts$NumCompaniesWorked\n#>   0%  25%  50%  75% 100% \n#>    0    1    2    4    9 \n#> \n#> $bin_cuts$OverTime\n#> NULL\n#> \n#> $bin_cuts$PercentSalaryHike\n#>   0%  25%  50%  75% 100% \n#>   11   12   14   18   25 \n#> \n#> $bin_cuts$PerformanceRating\n#> NULL\n#> \n#> $bin_cuts$RelationshipSatisfaction\n#> NULL\n#> \n#> $bin_cuts$StockOptionLevel\n#> NULL\n#> \n#> $bin_cuts$TotalWorkingYears\n#>   0%  25%  50%  75% 100% \n#>    0    6   10   15   38 \n#> \n#> $bin_cuts$TrainingTimesLastYear\n#>   0%  25%  50% 100% \n#>    0    2    3    6 \n#> \n#> $bin_cuts$WorkLifeBalance\n#> NULL\n#> \n#> $bin_cuts$YearsAtCompany\n#>   0%  25%  50%  75% 100% \n#>    0    3    5    9   37 \n#> \n#> $bin_cuts$YearsInCurrentRole\n#>   0%  25%  50%  75% 100% \n#>    0    2    3    7   18 \n#> \n#> $bin_cuts$YearsSinceLastPromotion\n#>   0%  50%  75% 100% \n#>    0    1    2   15 \n#> \n#> $bin_cuts$YearsWithCurrManager\n#>   0%  25%  50%  75% 100% \n#>    0    2    3    7   17 \n#> \n#> \n#> $feature_distribution\n#> $feature_distribution$Age\n#> \n#>         1         2         3         4 \n#> 0.2602082 0.2834267 0.2217774 0.2345877 \n#> \n#> $feature_distribution$BusinessTravel\n#> \n#>        Non-Travel     Travel_Rarely Travel_Frequently \n#>         0.1000801         0.7181745         0.1817454 \n#> \n#> $feature_distribution$DailyRate\n#> \n#>         1         2         3         4 \n#> 0.2514011 0.2489992 0.2497998 0.2497998 \n#> \n#> $feature_distribution$Department\n#> \n#>        Human Resources Research & Development                  Sales \n#>             0.04323459             0.65092074             0.30584468 \n#> \n#> $feature_distribution$DistanceFromHome\n#> \n#>         1         2         3         4 \n#> 0.2954363 0.2369896 0.2241793 0.2433947 \n#> \n#> $feature_distribution$Education\n#> \n#> Below College       College      Bachelor        Master        Doctor \n#>    0.11689351    0.18895116    0.38510809    0.27461970    0.03442754 \n#> \n#> $feature_distribution$EducationField\n#> \n#>  Human Resources    Life Sciences        Marketing          Medical \n#>       0.01761409       0.41793435       0.10888711       0.31144916 \n#>            Other Technical Degree \n#>       0.05444355       0.08967174 \n#> \n#> $feature_distribution$EmployeeNumber\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$EnvironmentSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1913531 0.1961569 0.3018415 0.3106485 \n#> \n#> $feature_distribution$Gender\n#> \n#>    Female      Male \n#> 0.4123299 0.5876701 \n#> \n#> $feature_distribution$HourlyRate\n#> \n#>         1         2         3         4 \n#> 0.2618094 0.2473979 0.2449960 0.2457966 \n#> \n#> $feature_distribution$JobInvolvement\n#> \n#>        Low     Medium       High  Very High \n#> 0.05684548 0.25780624 0.58927142 0.09607686 \n#> \n#> $feature_distribution$JobLevel\n#> \n#>          1          2          3          4          5 \n#> 0.36829464 0.36509207 0.14651721 0.07526021 0.04483587 \n#> \n#> $feature_distribution$JobRole\n#> \n#> Healthcare Representative           Human Resources     Laboratory Technician \n#>                0.08646918                0.03682946                0.18174540 \n#>                   Manager    Manufacturing Director         Research Director \n#>                0.06885508                0.09927942                0.05924740 \n#>        Research Scientist           Sales Executive      Sales Representative \n#>                0.18654924                0.22337870                0.05764612 \n#> \n#> $feature_distribution$JobSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1873499 0.1985588 0.3018415 0.3122498 \n#> \n#> $feature_distribution$MaritalStatus\n#> \n#>    Single   Married  Divorced \n#> 0.3306645 0.4571657 0.2121697 \n#> \n#> $feature_distribution$MonthlyIncome\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$MonthlyRate\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$NumCompaniesWorked\n#> \n#>          1          2          3          4 \n#> 0.48118495 0.09927942 0.20496397 0.21457166 \n#> \n#> $feature_distribution$OverTime\n#> \n#>        No       Yes \n#> 0.7165733 0.2834267 \n#> \n#> $feature_distribution$PercentSalaryHike\n#> \n#>         1         2         3         4 \n#> 0.2866293 0.2738191 0.2289832 0.2105685 \n#> \n#> $feature_distribution$PerformanceRating\n#> \n#>         Low        Good   Excellent Outstanding \n#>   0.0000000   0.0000000   0.8414732   0.1585268 \n#> \n#> $feature_distribution$RelationshipSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1889512 0.2161729 0.3018415 0.2930344 \n#> \n#> $feature_distribution$StockOptionLevel\n#> \n#>          0          1          2          3 \n#> 0.43554844 0.40592474 0.10168135 0.05684548 \n#> \n#> $feature_distribution$TotalWorkingYears\n#> \n#>         1         2         3         4 \n#> 0.3050440 0.3306645 0.1224980 0.2417934 \n#> \n#> $feature_distribution$TrainingTimesLastYear\n#> \n#>         1         2         3 \n#> 0.4603683 0.3306645 0.2089672 \n#> \n#> $feature_distribution$WorkLifeBalance\n#> \n#>        Bad       Good     Better       Best \n#> 0.05204163 0.22497998 0.61889512 0.10408327 \n#> \n#> $feature_distribution$YearsAtCompany\n#> \n#>         1         2         3         4 \n#> 0.3226581 0.2137710 0.2217774 0.2417934 \n#> \n#> $feature_distribution$YearsInCurrentRole\n#> \n#>          1          2          3          4 \n#> 0.46757406 0.08726982 0.27542034 0.16973579 \n#> \n#> $feature_distribution$YearsSinceLastPromotion\n#> \n#>         1         2         3 \n#> 0.6413131 0.1120897 0.2465973 \n#> \n#> $feature_distribution$YearsWithCurrManager\n#> \n#>          1          2          3          4 \n#> 0.46357086 0.09767814 0.25300240 0.18574860 \n#> \n#> \n#> attr(,\"class\")\n#> [1] \"data_frame_explainer\" \"explainer\"            \"list\"\n\nexplanation <- test_tbl %>%\n  slice(1) %>%\n  select(-Attrition) %>%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width = 1\n  )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation\n\n\n\n  \n\n\nexplanation %>%\n  as.tibble() %>%\n  select(feature:prediction)\n\n\n\n  \n\n\ng <- plot_features(explanation = explanation, ncol = 1)\n\n# 3.3 Multiple Explanations ----\n\nexplanation <- test_tbl %>%\n  slice(1:20) %>%\n  select(-Attrition) %>%\n  lime::explain(\n    explainer = explainer,\n    n_labels = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width = 0.5\n  )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %>%\n  as.tibble()\n\n\n\n  \n\n\nplot_features(explanation, ncol = 4)\n\n\n\n\n\n\nplot_explanations(explanation)"
  },
  {
    "objectID": "content/01_journal/05_black_box_models_lime.html#part-1",
    "href": "content/01_journal/05_black_box_models_lime.html#part-1",
    "title": "Explaining Black-Box Models With LIME",
    "section": "\n2.1 Part 1",
    "text": "2.1 Part 1\n\nlibrary(ggplot2)\n\nexplanation %>% as.tibble()\n\n\n\n  \n\n\n# Reference\nexplanation %>% filter(case == 1) %>% plot_features()\n\n\n\n\n\n\n# My version\nexplanation %>%\n    filter(case == 1) %>%\n    ggplot(aes(x = fct_reorder(feature,abs(feature_weight)),y = feature_weight,fill = feature_weight < 0)) +\n    coord_flip() +\n    geom_col(just = 0.5) + \n    labs( title = paste0(\n      \"Case: \",\"1\",\"\\n\",\n      \"Label: \",filter(explanation,case == 1)[1,]$label,\"\\n\",\n      \"Probability: \",filter(explanation,case == 1)[1,]$label_prob%>%round(2),\"\\n\",\n      \"Explanation Fit: \",filter(explanation,case == 1)[1,]$model_r2%>%round(2),\"\\n\"\n      ),\n      x = \"Feature\",\n      y = \"Weight\",\n      fill = \"\"\n    ) +\n    scale_x_discrete(labels=explanation %>% filter(case == 1) %>% arrange(abs(feature_weight)) %>% .$feature_desc) +\n    theme(legend.position = \"bottom\",\n          panel.background = element_blank(),\n          panel.grid.major.x = element_line(color=\"#EBEBEB\"),\n          panel.grid.minor.x = element_line(color=\"#EBEBEB\")\n    ) +\n    scale_fill_manual(values=c(\"#4682B4\", \"#B22222\"),labels=c(\"Supports\",\"Contradics\"))"
  },
  {
    "objectID": "content/01_journal/05_black_box_models_lime.html#part-2",
    "href": "content/01_journal/05_black_box_models_lime.html#part-2",
    "title": "Explaining Black-Box Models With LIME",
    "section": "\n2.2 Part 2",
    "text": "2.2 Part 2\n\n# Reference\nplot_explanations(explanation)\n\n\n\n\n\n\n# My version\nexplanation %>%\n    ggplot(aes(x = case,y = fct_reorder(feature,abs(label_prob)),fill = feature_weight)) +\n    facet_wrap(~label) + \n    geom_tile() + \n    labs(\n      x = \"Case\",\n      y = \"Feature\"\n    ) +\n    scale_y_discrete(labels=explanation%>% arrange(abs(label_prob)) %>% .$feature_desc) +\n    theme(panel.background = element_blank(),\n          panel.grid = element_blank(),\n          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)\n    ) +\n  scale_fill_gradient2('Feature \\n weight', low = '#B9362F', mid = \"white\", high = '#4B85B6')"
  },
  {
    "objectID": "content/01_journal/06_deep_learning_challenge.html",
    "href": "content/01_journal/06_deep_learning_challenge.html",
    "title": "MyLabJournal",
    "section": "",
    "text": "#Final Challenge\nAt first, the data has to be loaded.\n\nlibrary(tidyverse)\n\n#> -- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\n#> v dplyr     1.1.2     v readr     2.1.4\n#> v forcats   1.0.0     v stringr   1.5.0\n#> v ggplot2   3.4.2     v tibble    3.2.1\n#> v lubridate 1.9.2     v tidyr     1.3.0\n#> v purrr     1.0.1     \n#> -- Conflicts ------------------------------------------ tidyverse_conflicts() --\n#> x dplyr::filter() masks stats::filter()\n#> x dplyr::lag()    masks stats::lag()\n#> i Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(keras)\nlibrary(lime)\n\n#> \n#> Attaching package: 'lime'\n#> \n#> The following object is masked from 'package:dplyr':\n#> \n#>     explain\n\nlibrary(rsample)\nlibrary(recipes)\n\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\nlibrary(yardstick)\n\n#> \n#> Attaching package: 'yardstick'\n#> \n#> The following object is masked from 'package:keras':\n#> \n#>     get_weights\n#> \n#> The following object is masked from 'package:readr':\n#> \n#>     spec\n\nlibrary(corrr)\n\nchurn_data_raw <- read_csv(\"WA_Fn-UseC_-Telco-Customer-Churn.csv\")\n\n#> Rows: 7043 Columns: 21\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr (17): customerID, gender, Partner, Dependents, PhoneService, MultipleLin...\n#> dbl  (4): SeniorCitizen, tenure, MonthlyCharges, TotalCharges\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(churn_data_raw)\n\n#> Rows: 7,043\n#> Columns: 21\n#> $ customerID       <chr> \"7590-VHVEG\", \"5575-GNVDE\", \"3668-QPYBK\", \"7795-CFOCW~\n#> $ gender           <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Female\",~\n#> $ SeniorCitizen    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~\n#> $ Partner          <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes~\n#> $ Dependents       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\"~\n#> $ tenure           <dbl> 1, 34, 2, 45, 2, 8, 22, 10, 28, 62, 13, 16, 58, 49, 2~\n#> $ PhoneService     <chr> \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", ~\n#> $ MultipleLines    <chr> \"No phone service\", \"No\", \"No\", \"No phone service\", \"~\n#> $ InternetService  <chr> \"DSL\", \"DSL\", \"DSL\", \"DSL\", \"Fiber optic\", \"Fiber opt~\n#> $ OnlineSecurity   <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"~\n#> $ OnlineBackup     <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"N~\n#> $ DeviceProtection <chr> \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Y~\n#> $ TechSupport      <chr> \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes~\n#> $ StreamingTV      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Ye~\n#> $ StreamingMovies  <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"Yes~\n#> $ Contract         <chr> \"Month-to-month\", \"One year\", \"Month-to-month\", \"One ~\n#> $ PaperlessBilling <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", ~\n#> $ PaymentMethod    <chr> \"Electronic check\", \"Mailed check\", \"Mailed check\", \"~\n#> $ MonthlyCharges   <dbl> 29.85, 56.95, 53.85, 42.30, 70.70, 99.65, 89.10, 29.7~\n#> $ TotalCharges     <dbl> 29.85, 1889.50, 108.15, 1840.75, 151.65, 820.50, 1949~\n#> $ Churn            <chr> \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Y~\n\n\nThen the data gets pruned.\n\n# Prune the data\nchurn_data_tbl <- churn_data_raw %>%\n  # Remove the \"customerID\" column\n  select(-customerID) %>%\n  # Remove rows with NA values in \"TotalCharges\" column\n  drop_na(TotalCharges) %>%\n  # Move the target column to the first position\n  select(Churn, everything())\n\n# View the resulting table\nhead(churn_data_tbl)\n\n\n\n  \n\n\n\nThe dataset is split into a test and a training set.\n\n# Split test/training sets\nset.seed(69)\ntrain_test_split <- initial_split(churn_data_tbl, prop = 0.8)\ntrain_test_split\n\n#> <Training/Testing/Total>\n#> <5625/1407/7032>\n\n# Retrieve train and test sets\ntrain_tbl <- training(train_test_split)\ntest_tbl  <- testing(train_test_split)\n\n\nchurn_data_tbl %>% ggplot(aes(x = tenure)) + \n  geom_histogram(bins = 6, color = \"white\", fill =  \"#2DC6D6\") +\n  labs(\n    title = \"Tenure Counts With Six Bins\",\n    x     = \"tenure (month)\"\n  )\n\n\n\n\n\n\ntrain_tbl %>%\n    select(Churn, TotalCharges) %>%\n    mutate(\n        Churn = Churn %>% as.factor() %>% as.numeric(),\n        LogTotalCharges = log(TotalCharges)\n        ) %>%\n    correlate() %>%\n    focus(Churn) %>%\n    fashion()\n\n#> Correlation computed with\n#> * Method: 'pearson'\n#> * Missing treated using: 'pairwise.complete.obs'\n\n\n\n\n  \n\n\n\n##One-Hot Encoding\n\nchurn_data_tbl %>% \n        pivot_longer(cols      = c(Contract, InternetService, MultipleLines, PaymentMethod), \n                     names_to  = \"feature\", \n                     values_to = \"category\") %>% \n        ggplot(aes(category)) +\n          geom_bar(fill = \"#2DC6D6\") +\n          facet_wrap(~ feature, scales = \"free\") +\n          labs(\n            title = \"Features with multiple categories: Need to be one-hot encoded\"\n          ) +\n          theme(axis.text.x = element_text(angle = 25, \n                                           hjust = 1))\n\n\n\n\n\n\n\n#Proprocessing the Data\n\nrec_obj <- recipe(Churn ~ ., data = train_tbl) %>%\n    step_rm(Churn) %>% \n    step_discretize(tenure, options = list(cuts = 6)) %>%\n    step_log(TotalCharges) %>%\n    step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%\n    step_center(all_predictors(), -all_outcomes()) %>%\n    step_scale(all_predictors(), -all_outcomes()) %>%\n    prep(data = train_tbl)\n\n#Bake the predictors\n\n# Bake the predictors\nx_train_tbl <- bake(rec_obj, new_data = train_tbl)\nx_test_tbl  <- bake(rec_obj, new_data = test_tbl)\n\n#Response Variables for training and testing set\n\n# Response variables for training and testing sets\ny_train_vec <- ifelse(train_tbl$Churn == \"Yes\", 1, 0)\ny_test_vec  <- ifelse(test_tbl$Churn == \"Yes\", 1, 0)\n\n#Building the AI Model\n\n# Building our Artificial Neural Network\nmodel_keras <- keras_model_sequential()\n\nmodel_keras %>% \n    # First hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\", \n        input_shape        = ncol(x_train_tbl)) %>% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %>%\n    # Second hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\") %>% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %>%\n    # Output layer\n    layer_dense(\n        units              = 1, \n        kernel_initializer = \"uniform\", \n        activation         = \"sigmoid\") %>% \n    # Compile ANN\n    compile(\n        optimizer = 'adam',\n        loss      = 'binary_crossentropy',\n        metrics   = c('accuracy')\n    )\nmodel_keras\n\n#> Model: \"sequential\"\n#> ________________________________________________________________________________\n#>  Layer (type)                       Output Shape                    Param #     \n#> ================================================================================\n#>  dense_2 (Dense)                    (None, 16)                      816         \n#>  dropout_1 (Dropout)                (None, 16)                      0           \n#>  dense_1 (Dense)                    (None, 16)                      272         \n#>  dropout (Dropout)                  (None, 16)                      0           \n#>  dense (Dense)                      (None, 1)                       17          \n#> ================================================================================\n#> Total params: 1,105\n#> Trainable params: 1,105\n#> Non-trainable params: 0\n#> ________________________________________________________________________________\n\n\n\n1 Fit the keras model to the training data\n\nx_train_matrix = as.matrix(x_train_tbl)\ny_train_matrix = as.matrix(y_train_vec)\nx_test_matrix = as.matrix(x_test_tbl)\ny_test_matrix = as.matrix(y_test_vec)\nfit_keras <-  fit(\n    model_keras,\n    x = x_train_matrix,\n    y = y_train_matrix,\n    epochs = 35,\n    batch_size = 50,\n    validation_data = list(x_test_matrix, y_test_matrix),\n    validation_split = 0.3\n  )\nfit_keras\n\n#> \n#> Final epoch (plot to see history):\n#>         loss: 0.393\n#>     accuracy: 0.8215\n#>     val_loss: 0.4216\n#> val_accuracy: 0.796\n\n\n##Plotting of the training/validation accuracy\n\n# Plot the training/validation history of our Keras model\n#plot(fit_keras) +\n#  labs(title = \"Deep Learning Training Results\") +\n#  theme(legend.position  = \"bottom\", \n#        strip.placement  = \"inside\",\n#        strip.background = element_rect(fill = \"#grey\"))\n\n#Predictions\n\n# Predicted Class\nyhat_keras_class_vec <- predict(model_keras, as.matrix(x_test_tbl)) %>%\n  as.vector() %>%\n  round()\n\n# Predicted Class Probability\nyhat_keras_prob_vec  <- predict(model_keras, as.matrix(x_test_tbl)) %>%\n    as.vector()\n\n\n2 Estimations\n\nestimates_keras_tbl <- tibble(\n  truth = as.factor(y_test_vec) %>% fct_recode(Yes = \"1\", No = \"0\"),\n  estimate = as.factor(yhat_keras_class_vec) %>% fct_recode(Yes = \"1\", No = \"0\"),\n  class_prob = yhat_keras_prob_vec\n)\n\nestimates_keras_tbl\n\n\n\n  \n\n\n\n##confusion Table\n\n# Confusion Table\nconfusion_table <- conf_mat(data = estimates_keras_tbl, truth, estimate)\n\nconfusion_table\n\n#>           Truth\n#> Prediction  No Yes\n#>        No  936 165\n#>        Yes 122 184\n\n# Accuracy\naccuracy_result <- accuracy(data = estimates_keras_tbl, truth, estimate)\n\naccuracy_result\n\n\n\n  \n\n\n# AUC\nauc_result <- roc_auc(data = estimates_keras_tbl, truth, class_prob, event_level = \"second\")\n\nauc_result\n\n\n\n  \n\n\n\n\n3 Precision\n\n# Precision\nprecision_result <- precision(data = estimates_keras_tbl, truth, estimate)\n\n# Recall\nrecall_result <- recall(data = estimates_keras_tbl, truth, estimate)\n\n# Combine precision and recall results into a tibble\nprecision_recall_tbl <- tibble(\n  precision = precision_result$.estimate,\n  recall = recall_result$.estimate\n)\n\nprecision_recall_tbl\n\n\n\n  \n\n\n# F1-Statistic\nestimates_keras_tbl %>% f_meas(truth, estimate, beta = 1)\n\n\n\n  \n\n\n\n#LIME\n\n# F1-Statistic\nestimates_keras_tbl %>% f_meas(truth, estimate, beta = 1)\n\n\n\n  \n\n\n# Setup lime::model_type() function for keras\nmodel_type.keras.engine.sequential.Sequential  <- function(x, ...) {\n    return(\"classification\")\n}\n\n# Setup lime::predict_model() function for keras\npredict_model.keras.engine.sequential.Sequential <- function(x, newdata, type, ...) {\n    pred <- predict(object = x, x = as.matrix(newdata))\n    return(data.frame(Yes = pred, No = 1 - pred))\n}\n\nlibrary(lime)\n# Test our predict_model() function\npredict_model(x = model_keras, newdata = x_test_tbl, type = 'raw') %>%\n    tibble::as_tibble()\n\n\n\n  \n\n\n# Run lime() on training set\n# Run lime() on training set\nexplainer <- lime::lime(\n  x = x_train_tbl,\n  model = model_keras,\n  bin_continuous = FALSE\n)\n\n#> Warning: SeniorCitizen does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: gender_Female does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: gender_Male does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: Partner_No does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: Partner_Yes does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: Dependents_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: Dependents_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: tenure_bin1 does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: tenure_bin2 does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: tenure_bin3 does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: tenure_bin4 does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: tenure_bin5 does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: tenure_bin6 does not contain enough variance to use quantile binning.\n#> Using standard binning instead.\n\n\n#> Warning: PhoneService_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: PhoneService_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: MultipleLines_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: MultipleLines_No.phone.service does not contain enough variance to use\n#> quantile binning. Using standard binning instead.\n\n\n#> Warning: MultipleLines_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: InternetService_DSL does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: InternetService_Fiber.optic does not contain enough variance to use\n#> quantile binning. Using standard binning instead.\n\n\n#> Warning: InternetService_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: OnlineSecurity_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: OnlineSecurity_No.internet.service does not contain enough variance to\n#> use quantile binning. Using standard binning instead.\n\n\n#> Warning: OnlineSecurity_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: OnlineBackup_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: OnlineBackup_No.internet.service does not contain enough variance to\n#> use quantile binning. Using standard binning instead.\n\n\n#> Warning: OnlineBackup_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: DeviceProtection_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: DeviceProtection_No.internet.service does not contain enough variance\n#> to use quantile binning. Using standard binning instead.\n\n\n#> Warning: DeviceProtection_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: TechSupport_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: TechSupport_No.internet.service does not contain enough variance to\n#> use quantile binning. Using standard binning instead.\n\n\n#> Warning: TechSupport_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: StreamingTV_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: StreamingTV_No.internet.service does not contain enough variance to\n#> use quantile binning. Using standard binning instead.\n\n\n#> Warning: StreamingTV_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: StreamingMovies_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: StreamingMovies_No.internet.service does not contain enough variance\n#> to use quantile binning. Using standard binning instead.\n\n\n#> Warning: StreamingMovies_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: Contract_Month.to.month does not contain enough variance to use\n#> quantile binning. Using standard binning instead.\n\n\n#> Warning: Contract_One.year does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: Contract_Two.year does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: PaperlessBilling_No does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: PaperlessBilling_Yes does not contain enough variance to use quantile\n#> binning. Using standard binning instead.\n\n\n#> Warning: PaymentMethod_Bank.transfer..automatic. does not contain enough\n#> variance to use quantile binning. Using standard binning instead.\n\n\n#> Warning: PaymentMethod_Credit.card..automatic. does not contain enough variance\n#> to use quantile binning. Using standard binning instead.\n\n\n#> Warning: PaymentMethod_Electronic.check does not contain enough variance to use\n#> quantile binning. Using standard binning instead.\n\n\n#> Warning: PaymentMethod_Mailed.check does not contain enough variance to use\n#> quantile binning. Using standard binning instead.\n\n# Run explain() on test data\n\nx_test_df <- as.data.frame(x_test_tbl)\n\nexplanation <- lime::explain(\n  x = x_test_df[1:10, ],  # Specify all rows and desired columns\n  explainer = explainer,\n  n_labels = 2,\n  n_features = 50\n)\n\nplot_features(explanation)\n\n\n\n\n\n\nplot_explanations(explanation)\n\n\n\n\n\n\n\n#Correlation Analysis\n\n# Feature correlations to Churn\ncorrr_analysis <- x_train_tbl %>%\n    mutate(Churn = y_train_vec) %>%\n    correlate() %>%\n    focus(Churn) %>%\n    rename(feature = term) %>%\n    arrange(abs(Churn)) %>%\n    mutate(feature = as_factor(feature)) \n\n#> Correlation computed with\n#> * Method: 'pearson'\n#> * Missing treated using: 'pairwise.complete.obs'\n\ncorrr_analysis\n\n\n\n  \n\n\n# Correlation visualization\ncorrr_analysis %>%\n  ggplot(aes(x = Churn, y = fct_reorder(feature, desc(Churn)))) +\n  geom_point() +\n  \n  # Positive Correlations - Contribute to churn\n  geom_segment(aes(xend = 0, yend = feature), \n               color = \"red\", \n               data = corrr_analysis %>% filter(Churn > 0)) +\n  geom_point(color = \"red\", \n             data = corrr_analysis %>% filter(Churn > 0)) +\n  \n  # Negative Correlations - Prevent churn\n  geom_segment(aes(xend = 0, yend = feature), \n               color = \"#2DC6D6\", \n               data = corrr_analysis %>% filter(Churn < 0)) +\n  geom_point(color = \"#2DC6D6\", \n             data = corrr_analysis %>% filter(Churn < 0)) +\n  \n  # Vertical lines\n  geom_vline(xintercept = 0, color = \"#f1fa8c\", size = 1, linetype = 2) +\n  geom_vline(xintercept = 0.25, color = \"#f1fa8c\", size = 0.5, linetype = 2) +\n  geom_vline(xintercept = -0.25, color = \"#f1fa8c\", size = 0.5, linetype = 2) +\n  \n  # Aesthetics\n  labs(x = \"Churn\", y = \"Feature Importance\", title = \"Churn correlation analysis\", subtitle = \"Positive Correlations (contribute to churn), Negative Correlations (prevent Churn)\")\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> i Please use `linewidth` instead."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html",
    "href": "content/01_journal/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT~\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, ~\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53~\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68~\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01~\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09~\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5~\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1~\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is the journal of the Seminar about Business-decisions with machine learning."
  }
]